# spring.profiles.active=demo

# logging level
logging.level.org.springframework=ERROR
logging.level.root=ERROR
logging.level.org.sebi=DEBUG
logging.level.org.springframework.security=DEBUG

# output to a file
logging.file.name=log/app.log

# Spring security
# spring.security.user.name=user
# spring.security.user.password=password

# enables thymeleaf creation of hidden input fields for PUT and POST requests via html forms
# https://stackoverflow.com/questions/38370011/thymeleaf-button-click-to-call-http-delete-method
spring.mvc.hiddenmethod.filter.enabled=true


# specific properties
gams.curHost=http://localhost:8082
gams.fedoraRESTEndpoint=/rest/


###############
##############
#### Security
####
##############

###########
# Oauth2 client with keycloak external dep
# - using authorization code flow oauth2 pattern (protecting a tymeleaf app)

# CLIENT-ID
# using name of configured key cloak client
# in property value AND key.
spring.security.oauth2.client.registration.spring-fedora-client.client-id=spring-fedora-client

# CLIENT_SECRET
# paste in set client secret from keycloak here
spring.security.oauth2.client.registration.spring-fedora-client.client-secret=MrrcrE7BHO1mkzi2Zl9aTrofrltmjtMT

# SCOPE
spring.security.oauth2.client.registration.spring-fedora-client.scope=openid, profile, roles

# AUTHORIZATION GRANTYPE
# authorization flow of client
# in case of spring + thymeleaf web client -> authorization-code!
spring.security.oauth2.client.registration.spring-fedora-client.authorization-grant-type=authorization_code

# REDIRECT URI
# url which keycloak server will call when authentication was succesful
# redirect uri is defined by spring security
spring.security.oauth2.client.registration.spring-fedora-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-fedora-client


# ISSUER-URI
# under open id configuration on current realm of keycloak
# urls that are defined being part of our realm
# according to oauth2 standard!
# all other endpoints are constructed from issuer endpoint like where to get the actual token etc.
# spring.security.oauth2.client.provider.registration.spring-fedora-client.issuer-uri=http://localhost:8182/auth/realms/spring-fedora-realm

spring.security.oauth2.client.provider.spring-fedora-client.issuer-uri=http://localhost:8182/realms/spring-fedora

# spring.security.oauth2.client.registration.spring-fedora-client.provider=spring-fedora-client

# spring.security.oauth2.client.provider.spring-fedora-client.authorization-uri=http://localhost:8182/o/oauth2/v2/auth